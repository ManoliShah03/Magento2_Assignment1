type Query {
    #Assignment1
    disabledProductsList: [GetAllDisableProducts] @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\GetAllDisabledProducts") @doc(description: "Get All disable Product Data")

    #Assignment2
    dailyDeal: DailyDealResponse! @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\GetSpecialPriceProducts") @doc(description: "Get list of special price products")

     #Assignment4
     products(search: String, pageSize: Int = 20): ProductResult @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\ProductBrand") @doc(description: "Query to retrieve a list of products with pagination.")

    #Assignment5
    customerList(pageSize: Int! currentPage: Int!): CustomerList! @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\CustomerList")

     #Assignment7
     storeConfig(store: String): StoreConfig! @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\StoreConfig") @doc(description: "System Config ")

     #Assignment10
     orders(startDate: String! @doc(description: "Start Date"), endDate: String! @doc(description: "End Date")): [Order] @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\OrderDetails") @doc(description: "Get Order Details")

}


#Assignment1
type GetAllDisableProducts {
    entityId: Int @doc(description: "Primary Id"),
    proName: String @doc(description: "Product Name"),
    sku: String @doc(description: "sku of Product"),
    category: String @doc(description: "Category of Product"),
    weight: Int @doc(description: "Weight of Product"),
}

#Assignment2
type DailyDealResponse {
  products_skus: [String!]! @doc(description: "List of product SKUs")
}

#Assignment3
type Mutation {
    createProduct(product: ProductInput!): Product! @resolver(class: "GraphQl\\DisabledProducts\\Model\\Resolver\\CreateProduct")
}

type Product {
    id: ID!
    name: String!
    description: String!
    price: Float!
}

input ProductInput {
    sku: String!
    name: String!
    description: String!
    price: Float!
}

#Assignment4
type ProductResult {
  total_count: Int!
  items: [Product]
  page_info: PageInfo!
}

type Product {
  name: String!
  sku: String!
  brand: String!
  price_range: PriceRange
}

type PriceRange {
  minimum_price: [RegularPrice]
}

type RegularPrice {
  regular_price: RegularPriceInfo
}

type RegularPriceInfo {
  value: Int
  currency: String
}

#Assignment5
type CustomerList {
  success: Boolean! @doc(description: "Indicates if the request was successful")
  message: String! @doc(description: "Error message, if any")
  total_count: Int! @doc(description: "Total count of customers")
  items: [Customer!]! @doc(description: "List of customers")
  page_info: PageInfo! @doc(description: "Pagination information")
}

type Customer {
  customer_id: Int! @doc(description: "Customer ID")
  email: String! @doc(description: "Email address of the customer")
  group: String! @doc(description: "Customer group")
}

type PageInfo {
  current_page: Int! @doc(description: "Current page number")
  page_size: Int! @doc(description: "Number of items per page")
  total_pages: Int! @doc(description: "Total number of pages")
}

#Assignment6
type Mutation {
  generateCustomerToken(
    email: String!
    password: String!
  ): GenerateCustomerTokenOutput @resolver(class: "GraphQL\\DisabledProducts\\Model\\Resolver\\GenerateCustomerToken") @doc(description: "Generate customer token with extra parameters")
}

type GenerateCustomerTokenOutput {
  token: String!
  customer_id: Int!
  group: String!
  newsletter_subscribe: String!
}

#Assignment7
type StoreConfig {
  website_default_title: String
  website_default_index: String
}

#Assignment10
type Order {
  order_id: Int @doc(description: "Order Id")
  increment_id: String @doc(description: "Increment Id")
  items: [Item] @doc(description: "Item details")
}

type Item {
  item_id: Int @doc(description: "Product Id")
  item_name: String @doc(description: "Product Name")
  qty: Int @doc(description: "Quantity of Product")
}










